# Declare the list of supply offers
xg <- c(120 ,50 ,200 ,400 ,60 ,50 ,60 ,100 ,70 ,50 ,70 ,45 ,50 ,60 ,50) # Quantities
yg <- c(0 ,0 ,15 ,30 ,32.5 ,34 ,36 ,37.5 ,39 ,40 ,60 ,70 ,100 ,150 ,200) # Prices
# Set up the minimization problem as an LP to be solved by lpSolve . . .
# Construct the c vector for the objective function :
f.obj <- c(-xg,-xd,0)
# Construct the A matrix for the inequality constraints (as well as # non−negativity )
onec <- diag(rep(-1,length(xg)+length(xd)))
rcol <-c(rep(1,length(xg)),rep(-1,length(xd)))
mgd <- cbind(onec,rcol)
onecm <- diag(rep(1,length(xg)+length(xd)))
rcolm <- rep(0 ,length(xg)+length(xd))
mdg <- cbind(onecm,rcolm)
f.con <- rbind(mgd,mdg)
# Construct the right−hand side of the inequality constraint
f.rhs <- c(yg,-yd,rep(0,length(xg)+length(xd)))
# Declare the all types of constraints to be represented (i.e., # a suite of inequality constraints)
f.dir<- c(rep('<=',(length(xg)+length(xd))),rep('>=',(length(xg)+length(xd))))
# Now feed the LP solver , and directly ask for the solution
v.sol <- lp('max', f.obj, f.con, f.dir, f.rhs)$solution
# The equilibrium price is related to the last constraint
eq.price <- v.sol[length(v.sol )]
print(c('Equilibrium price: ',eq.price))
}
marketclearingdualLP()
marketclearingdualLP <- function(){
# Case 2: Implementation of the dual LP
#install.packages('lpSolve')
require(lpSolve) # calls the necessary LP solver (to be installed beforehand!)
# Declare the list of demand offers
xd <- c(250 ,300 ,120 ,80 ,40 ,70 ,60 ,45 ,30 ,35 ,25 ,10) # Quantities
yd <- c(200 ,110 ,100 ,90 ,85 ,75 ,65 ,40 ,37.5 ,30 ,24 ,15) # Prices
# Declare the list of supply offers
xg <- c(120 ,50 ,200 ,400 ,60 ,50 ,60 ,100 ,70 ,50 ,70 ,45 ,50 ,60 ,50) # Quantities
yg <- c(0 ,0 ,15 ,30 ,32.5 ,34 ,36 ,37.5 ,39 ,40 ,60 ,70 ,100 ,150 ,200) # Prices
# Set up the minimization problem as an LP to be solved by lpSolve . . .
# Construct the c vector for the objective function :
f.obj <- c(-xg,-xd,0)
# Construct the A matrix for the inequality constraints (as well as # non−negativity )
onec <- diag(rep(-1,length(xg)+length(xd)))
rcol <-c(rep(1,length(xg)),rep(-1,length(xd)))
mgd <- cbind(onec,rcol)
onecm <- diag(rep(1,length(xg)+length(xd)))
rcolm <- rep(0 ,length(xg)+length(xd))
mdg <- cbind(onecm,rcolm)
f.con <- rbind(mgd,mdg)
# Construct the right−hand side of the inequality constraint
f.rhs <- c(yg,-yd,rep(0,length(xg)+length(xd)))
# Declare the all types of constraints to be represented (i.e., # a suite of inequality constraints)
f.dir<- c(rep('<=',(length(xg)+length(xd))),rep('>=',(length(xg)+length(xd))))
# Now feed the LP solver , and directly ask for the solution
v.sol <- lp('max', f.obj, f.con, f.dir, f.rhs)$solution
# The solution can then be decomposed into :
# 1. the dispatch for the suppliers
print(c('Supply: ',v.sol[1:length(yg)]))
# 2. the dispatch for the demand
print(c('Demand: ',v.sol[(length(yg)+1):(length(yg)+length(yd))]))
# The equilibrium price is related to the last constraint
eq.price <- v.sol[length(v.sol )]
print(c('Equilibrium price: ',eq.price))
}
marketclearingdualLP()
install.packages("installr")
version()
version
updateR()
# vectores random con dist. uniforme
x <-rnorm(100,0,1)
y <-rnorm(length(x),0,1)
help(rnorm)
dnorm(0) == 1/sqrt(2*pi)
dnorm(1) == exp(-1/2)/sqrt(2*pi)
dnorm(1) == 1/sqrt(2*pi*exp(1))
## Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("pnorm(x, log=TRUE)", adj = 0)
mtext("log(pnorm(x))", col = "red", adj = 1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
help(runif)
# Crear data frame
df = data.frame(x,y,z)
head(df)
help(head)
# Crear data frame
df = data.frame(x,y,z)
head(df)
# Crear data frame
df = data.frame(x,y,z)
# vectores random con dist. uniforme
x <-rnorm(100,0,1)
y <-rnorm(length(x),0,1)
z = runif(length(x),0,1)
# Crear data frame
df = data.frame(x,y,z)
head(df)
table(df)
table(df)
help(table)
help(melt)
help(melt)
help(name)
help(names)
names(df)
help(as)
str(df)
class(df)
# cargar dataset de un paquete
data(iris)
# cargar dataset de un paquete
df1 = data(iris)
# Crear data frame
df = data.frame(x,y,z)
# cargar dataset de un paquete
data(iris)
# cargar dataset de un paquete
data(iris)
library(dplyr) #  basic data manipulation
# cargar dataset de un paquete
data(iris)
tale(iris)
tale(iris)
table(iris)
head(iris)
# crear vector
v = c(1,2,3,4,5,6)
# crear vector
v1 = c(1,2,3,4,5,6)
# crear vector
v1 <- c(1,2,3,4,5,6)
v2 <- c(1:10)
# crear vector
v1 <- c(1,2,3,4,5,6)
v2 <- seq(1,10,by=0.5)
# crear vector
v1 <- c(1,2,3,4,5,6)
v2 <- c(1:10)
v3 <- seq(1,10,by=0.5)
v6 <- rep(1,3, times=4)
v6 <- rep(1,2, times=3)
v6 <- rep(1:2, times=3)
v6 <- rep(1:2, times=4)
v6 <- rep(1:5, times=4)
v6 <- rep(1:5, each=4)
v7 <- rep(1:5, each=4)
i
i
i
v
v
v6 <- rep(1:5, times=4)
v7 <- rep(1:5, each=4)
sort(v6)
data(aemet)
license() # license
citation() # how to cite when you are using R
demo()
demo(lm.glm)
# basic operations
x <- 2
y <- 10
z = x + y
z
sqrt(z)
vol = z^3
vol
ls()
ls() # list of variables
rm(x) # delete a variable
rm(x) # delete the variable "x"
rm(list=ls()) # clean all variables
print(vol)
vol = z^3
print(vol)
print(vol)
# basic operations
x <- 2
y <- 10
z = x + y
print(vol)
# basic operations
x <- 2
y <- 10
z = x + y
vol = z^3
print(vol)
print('vol'vol)
print('vol', vol)
print('vol:')
print( vol)
print('vol:%vol')
print('vol:')
print( vol)
sqrt(z)
# basic operations
x <- 2
y <- 10
z = x + y
k = sqrt(z)^3
print('k:')
print(k)
print('k:sqrt(x+y)^3')
print(k)
print('k:=sqrt(x+y)^3')
print(k)
ls() # list of variables
rm(x) # delete the variable "x"
rm(list=ls()) # clean all variables
nombre<-"Alfredo"
mode(nombre)
a <- TRUE
mode(a)
b <- 5+3i
mode(b)
c <- 1.3e4
mode(c)
d <- sqrt(2)
mode(d)
vector <-c(123,89,142,118,109)
vector_numeric <-c(123,89,142,118,109)
names(vector)<-c("Lunes","Martes", "Miercoles","Jueves","Viernes")
vector
vector[1]
vector['Luenes']
vector['Lunes']
sum(vector)
length(vector)
mean_value = sum(vector)/length(vector)
mean_value
mean(vector)
range(vector)
cumsum(vector)
diff(vector)
sort(vector)
n = length(vector)
variance = sum( sum((mean(vector)-incidencias)^2)/(lenght(vector)-1))
variance = sum( sum((mean(vector)-vector)^2)/(lenght(vector)-1))
variance = sum( sum((mean(vector)-vector)^2)/(length(vector)-1))
variance
var(vector)
vector[length(vector)]
vector[1:3]
vector[c(1,3,5)]
vector[-1]
vector["Martes"]
vector>100
vector[vector>100]
sum(vector>100)
plot(vector, asp = 0.05 , type = 'o')
vector
plot(vector, asp = 0.05 , type = 'o')
plot(vector,type="b",asp = 0.05)
getwd()
setwd("/Users/joseangelvelasco/Google Drive/Data Science/R")
write(vector,"vector.csv",ncolumns=1)
rm(list=ls())
ls()
vector<-scan("vector.csv")
save(vector,file="vector.Rdata")
rm(list=ls())
ls()
load("vector.Rdata")
vector
save.image(file="intro_R_workspace.Rdata")
data <- read.csv(file="kilometros.csv", header=TRUE, sep=",")
get_wd()
gewd()
getwd()
setwd('/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion1)
setwd('/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion1')
getwd()
setwd("/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion1")
data <- read.csv(file="kilometros.csv", header=TRUE, sep=",")
rm(list=ls())
getwd()
setwd("/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion1")
data <- read.csv(file="kilometros.csv", header=TRUE, sep=",")
plot(data[['kilometers']])
plot(data['kilometers'])
data <- read.csv(file="kilometers.csv", header=TRUE, sep=",")
plot(data['kilometers'])
plot(data[['kilometers']])
diff(data[['kilometers']])
length(data[['kilometers']])
mean(diff(data[['kilometers']]))
sd(diff(data[['kilometers']]))
summary(diff(data[["kilometers"]]))
kilometers <- c(55311, 55631, 55912, 56215, 56499, 56826, 57145, 57442)
diff(kilometers)
mean(kilometers)
mean(diff(kilometers))
boxplot(diff(kilometers),boxwex=0.5,main = "Kiometros recorridos por deposito")
boxplot(diff(kilometers),boxwex=0.5,main = "Kilometeres per deposit")
summary(diff(kilometers))
sd(diff(kilometers))
rainings05 <- c(124,60,34,29,31,40,30,18,21,10,24,26)
rainings06 <- c(69,44,31,15,58,16,99,86,51,0,39,52)
names(rainings05) <- c("Oct","Nov","Dic","En","Feb","Mar","Ab","May","Jun","Jul","Ago","Sep")
names(rainings06) <- c("Oct","Nov","Dic","En","Feb","Mar","Ab","May","Jun","Jul","Ago","Sep")
names(rainings05) <- c("Oct","Nov","Dic","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep")
names(rainings06) <- c("Oct","Nov","Dic","Jan","Feb","Mar","pr","May","Jun","Jul","Aug","Sep")
sum(rainings05)
sum(rainings06)
cumsum(rainings06)
cumsum(rainings05)
cumsum(rainings06)
which.max(rainings05)
which.max(rainings06)
which.min(rainings05)
which.min(rainings06)
mean(rainings05)
mean(rainings06)
mean(c(rainings05,rainings06))
plot(rainings05)
plot(rainings06)
plot(c(rainings05,rainings06))
diference0506 =  rainings05 - rainings06
plot(diference0506)
data <- read.csv(file="laod_demand.csv")
rm(list=ls())
data <- read.csv(file="load_demand.csv")
plot(data[['load']])
plot(data['load'])
]
plot(data[['load']])
length(data[['load']])
summary(data[["load"]])
quantile(data[["load"]],.75)
max(data[["load"]])
min(data[["load"]])
rm(list=ls())
getwd()
setwd("/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion2")
poll <-c("yes", "no", "no", "yes", "ns/nc", "yes", "no", "yes", "ns/nc", "no")
table(poll)
table(poll)/length(poll)
grades <- c(1, 3, 2, 5, 1, 2, 3, 4, 2, 3, 4, 3, 5, 3, 4, 5, 2, 3, 4, 2)
table(grades)
barplot(table(grades), xlab="Grades",ylab="Frequency")
pie(table(grades),main="Grades")
pieces <- c(2, 3, 12, 23, 0, 4, 12, 4, 13, 2, 0, 2, 1, 4, 0, 2)
table(pieces)
stem(pieces)
mean(pieces)
median(pieces)
which.max(table(pices))
which.max(table(pieces))
pieces
mean(pieces)
median(pieces)
which.max(table(pieces))
var(pieces)
sd(pieces)
quantile(pieces,.5)
quantile(pieces,c(.25,.5,.75))
summary(pieces)
IQR(pieces)
ls()
write.csv(satisfaccion, file = "poll.csv")
write.csv(grades, file = "grades.csv")
write.csv(pieces, file = "pieces.csv")
write.csv(poll, file = "poll.csv")
write(grades, file = "grades.txt")
write(pieces, file = "pieces.txt")
write(poll, file = "poll.txt")
wait <- scan("wait.txt")
summary(wait)
plot(wait, xlab = "Observations", ylab = "Time", main = "Waiting time to XXX")
barplot(table(espera), main = 'Bar plot')
barplot(table(wait), main = 'Bar plot')
hist(wait, breaks=30, main = 'Histogram')
hist(wait, probability = TRUE, breaks = 30, main = 'Relative frequencies Histogram')
print("Centred data")
asymmetry = sum((wait-wait(espera))^3)/ (length(wait)*sqrt(var(wait))^3)
asymmetry = sum((wait-mean(wait))^3)/ (length(wait)*sqrt(var(wait))^3)
asymmetry
if (asymmetry<0){
print("asymmetry to the left")
}
if (asymmetry>0){
print("asymmery to the right")
}
if (asymmetry==0){
print("Centred data")
}
if (asymmetry<0){
print("asymmetry to the left")
}
if (asymmetry<0){
print("asymmetry to the left")}
if (asymmetry>0){
print("asymmery to the right")}
if (asymmetry==0){
print("Centred data")}
if (asymmetry<0){print("asymmetry to the left")}
if (asymmetry>0){print("asymmery to the right")}
if (asymmetry==0){print("Centred data")}
asymmetry <- function(x){
sum((x-mean(x))^3)/ (length(x)*sqrt(var(x))^3)
}
asymmetry <- function(x){
sum((x-mean(x))^3)/ (length(x)*sqrt(var(x))^3)
}
asymmetry
asymmetry <- function(x){
sum((x-mean(x))^3)/ (length(x)*sqrt(var(x))^3)
}
asymmetry(wait)
kurtosis = sum((wait-mean(wait))^4)/ (length(wait)*var(wait)^2)-3
kurtosis
if (kurtosis<0){
print("kurtosis: Platicutica")
}
if (kurtosis>0){
print("kurtosis: Leptocurtica")
}
if (kurtosis<0.1 && kurtosis>-0.1){
print("kurtosis: Mesocurtica")
}
if (kurtosis==0){
print("Non-kurtosis")
}
kurtosis <- function(x){
sum((x-mean(x))^4)/ (length(x)*var(x)^2)-3
}
kurtosis(wait)
q1 = quantile(wait,.25)
q2 = quantile(wait,.50)
q3 = quantile(wait,.75)
iqr <- IQR(wait)
lower = min(c(q1-1.5*iqr,q3+1.5*iqr))
lower
lower = min(c(q1-1.5*iqr,q3+1.5*iqr))
fivenum(wait)
boxplot(wait, horizontal = TRUE, notch = TRUE)
rm(list=ls())
getwd()
setwd("/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion2")
encuesta1 <- scan("ejercicios/poll1.txt")
encuesta1 <- scan("poll1.txt")
encuesta1
load("ejercicios/poll2.Rdata")
load("poll2.Rdata")
poll1 <- scan("poll1.txt")
rm(list=ls())
getwd()
setwd("/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion2")
poll1 <- scan("poll1.txt")
load("poll2.Rdata")
poll2 = encuesta2
rm(list=ls())
load("poll2.Rdata")
poll2 = encuesta2
rm('encuenta2')
rm(encuenta2)
rm(encuesta2)
save.image(file="poll2.Rdata")
rm(list=ls())
getwd()
setwd("/Users/joseangelvelasco/Google Drive/Data Science/R/files/intro_r/sesion2")
poll1 <- scan("poll1.txt")
load("poll2.Rdata")
table(poll1)
table(poll2)
poll <- c(poll1, poll2)
table(poll)
barplot(table(poll))
barplot(table(poll))
table(poll)/length(poll)
pie(table(poll)/length(poll))
# Exercise 2
rm(list=ls())
load("ejercicios/shine.Rdata")
load("shine.Rdata")
length(shine)
shine = brillo
rm(brillo)
save.image(file="shine.Rdata")
load("shine.Rdata")
# Exercise 2
rm(list=ls())
load("shine.Rdata")
length(shine)
summary(shine)
mean(shine)
median(shine)
which.max(table(shine))
kurtosis(brillo)
kurtosis <- function(x){
sum((x-mean(x))^4)/ (length(x)*var(x)^2)-3
}
asymmetry <- function(x){
sum((x-mean(x))^3)/ (length(x)*sqrt(var(x))^3)
}
kurtosis(brillo)
asymmetry(brillo)
kurtosis(shine)
asymmetry(shine)
